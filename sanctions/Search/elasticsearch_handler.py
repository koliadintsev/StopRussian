"""
Главный обработчик ElasticSearch
"""
from elasticsearch import Elasticsearch, exceptions
import elasticsearch_dsl
import concurrent.futures
import uuid
from elasticsearch_dsl import connections, Index, Search, analyzer, Q
import re
import jsons
from sanctions.DataImport import import_sanctions_eu, import_sanctions_uk
from sanctions.DataImport import import_sanctions_usa
from sanctions.DataModel.USA import sanction_USA
from sanctions.DataModel.UK import sanction_UK
from sanctions.DataModel.EU import sanction_EU
import copy

from settings import STATIC_ROOT

#SERVER_URL = "https://localhost:9200"  # Тест
#SERVER_URL = "https://search-lexcovery-dev-glueefgtrwhrhwln3es3dscawm.eu-central-1.es.amazonaws.com/" # Основа
#SERVER_URL = "http://elasticsearch:9200"  # Docker
SERVER_URL = "https://stoprussian.es.us-central1.gcp.cloud.es.io:9243"

# Password for the 'elastic' user generated by Elasticsearch
#ELASTIC_PASSWORD = "tjkwrXgtwvK8kmtxUqE2"
ELASTIC_PASSWORD = "54rV2zeqXtp7AoYDP5MGnEBP"
HTTP_CA_fingerprint = '835009b97f1643505f429aeb80acbdb4f7a01de1c3d360219f4f9b7933384a20'
HTTP_CA_FILENAME = STATIC_ROOT + "/ca_certs/http_ca.crt"
api_key = "sanctions"
api_key_pass = "Z0hHTTBIOEJURDllSmF2OHlwZ3k6cjRlTnBBbGVSTGEzLV9kczU5N1J5Zw=="
# Found in the 'Manage Deployment' page
CLOUD_ID = "StopRussian:dXMtY2VudHJhbDEuZ2NwLmNsb3VkLmVzLmlvJGUyMWY4NDQwZTgyODRhNmZiNTM1NGJkY2UwYzExZmEwJDczZGU0MTdjOTU1NjQxZDI4NTdiMzRhMmQyZmFlNTdi"

sanctions_USA = []
sanctions_EU = []
sanctions_UK = []

def ping(client):
    # Successful response!
    # {'name': 'instance-0000000000', 'cluster_name': ...}
    return client.ping()


def initialize_client():
    # Create the client instance
#    client = Elasticsearch(
#        SERVER_URL,
#        ca_certs=HTTP_CA_FILENAME,
#        http_auth=("elastic", ELASTIC_PASSWORD)
#    )
    client = Elasticsearch(
        SERVER_URL,
        cloud_id=CLOUD_ID,
        http_auth=("elastic", ELASTIC_PASSWORD)
    )
    return client


def create_index():
    global sanctions_USA
    global sanctions_EU
    global sanctions_UK

    delete_index()

    client = initialize_client()

    sanctions_USA = import_sanctions_usa.import_data_from_xml()
    sanctions_EU = import_sanctions_eu.import_data_from_xml()
    sanctions_UK = import_sanctions_uk.import_data_from_xml()

    # Создаем индекс
    client.indices.create(index="sanctions_usa")
    client.indices.create(index="sanctions_uk")
    client.indices.create(index="sanctions_eu")

    # Вносим имена в индекс
    for sanction in sanctions_USA:
        dict = jsons.dump(sanction)
        client.index(index="sanctions_usa", document=dict)

    for sanction in sanctions_UK:
        dict = jsons.dump(sanction)
        client.index(index="sanctions_uk", document=dict)

    for sanction in sanctions_EU:
        dict = jsons.dump(sanction)
        client.index(index="sanctions_eu", document=dict)


def delete_index():
    client = initialize_client()
    try:
        client.indices.delete(index="sanctions_usa")
        client.indices.delete(index="sanctions_uk")
        client.indices.delete(index="sanctions_eu")
    except exceptions.TransportError:
        client.close()


def search_match_request(request):
    client = initialize_client()
    result_usa = []
    result_uk = []
    result_eu = []
    query = Q("multi_match", query = request, type='cross_fields', operator='and')

    s = Search(index="sanctions_usa").using(client).query(query).source(["id"])
    s.execute()
    for hit in s.scan():
        result_usa.append(hit.id)
        #print(hit.meta.index)

    s = Search(index="sanctions_uk").using(client).query(query).source(["id"])
    s.execute()
    for hit in s.scan():
        result_uk.append(hit.id)
        #print(hit.meta.index)

    s = Search(index="sanctions_eu").using(client).query(query).source(["id"])
    s.execute()
    for hit in s:
        result_eu.append(hit.id)
        #print(hit.meta.index)

    return result_usa, result_uk, result_eu


def search_fuzzy_request(request):
    global sanctions_USA
    global sanctions_EU
    global sanctions_UK

    if len(sanctions_USA) == 0:
        sanctions_USA = import_sanctions_usa.import_data_from_xml()
        sanctions_EU = import_sanctions_eu.import_data_from_xml()
        sanctions_UK = import_sanctions_uk.import_data_from_xml()

    client = initialize_client()
    search_result = []
    result = []

    query = Q("multi_match", query = request, type='best_fields', operator='and', fuzziness='AUTO')

    s = Search().using(client).query(query).source(["id"])
    s.execute()
    for hit in s:
        res = {"index": hit.meta.index, "doc_id": hit.id}
        search_result.append(res)

    for doc in search_result:
        doc_id = doc["doc_id"]
        if doc["index"] == "sanctions_usa":
            sanction = sanctions_USA[doc_id]
            if sanction.id != doc_id:
                for s in sanctions_USA:
                    if s.id == doc_id:
                        sanction = s
            result.append(copy.deepcopy(sanction.webify()))
        elif doc["index"] == "sanctions_uk":
            sanction = sanctions_UK[doc_id]
            if sanction.id != doc_id:
                for s in sanctions_UK:
                    if s.id == doc_id:
                        sanction = s
            result.append(copy.deepcopy(sanction.webify()))
        elif doc["index"] == "sanctions_eu":
            sanction = sanctions_EU[doc_id]
            if sanction.id != doc_id:
                for s in sanctions_EU:
                    if s.id == doc_id:
                        sanction = s
            result.append(copy.deepcopy(sanction.webify()))

    return result

def check():
    client = initialize_client()
    return client.ping()

